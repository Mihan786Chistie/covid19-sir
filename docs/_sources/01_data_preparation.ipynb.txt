{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "view-in-github"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lisphilar/covid19-sir/blob/master/example/01_data_preparation.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hNtWGMj80ftz"
      },
      "source": [
        "# Data preparation\n",
        "The first step of data science is data preparation. `covsirphy` has the following three functionality for that.\n",
        "\n",
        "1. Downloading datasets from recommended data servers\n",
        "2. Reading `pandas.DataFrame`\n",
        "3. Generator of sample data with SIR-derived ODE model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "4xwq1Ez50ft0",
        "outputId": "93d5bc0e-07d5-4c5a-a278-fb53091e076c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "    Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone\n",
            "\u001b[K     |████████████████████████████████| 2.0 MB 17.8 MB/s \n",
            "\u001b[K     |████████████████████████████████| 235 kB 72.0 MB/s \n",
            "\u001b[K     |████████████████████████████████| 51 kB 7.6 MB/s \n",
            "\u001b[K     |████████████████████████████████| 1.0 MB 46.8 MB/s \n",
            "\u001b[K     |████████████████████████████████| 62 kB 1.4 MB/s \n",
            "\u001b[K     |████████████████████████████████| 167 kB 57.2 MB/s \n",
            "\u001b[K     |████████████████████████████████| 998 kB 45.9 MB/s \n",
            "\u001b[K     |████████████████████████████████| 308 kB 53.0 MB/s \n",
            "\u001b[K     |████████████████████████████████| 96.9 MB 110 kB/s \n",
            "\u001b[K     |████████████████████████████████| 486 kB 48.2 MB/s \n",
            "\u001b[K     |████████████████████████████████| 6.3 MB 53.4 MB/s \n",
            "\u001b[K     |████████████████████████████████| 16.7 MB 58.2 MB/s \n",
            "\u001b[K     |████████████████████████████████| 81 kB 10.0 MB/s \n",
            "\u001b[K     |████████████████████████████████| 209 kB 61.1 MB/s \n",
            "\u001b[K     |████████████████████████████████| 78 kB 7.5 MB/s \n",
            "\u001b[K     |████████████████████████████████| 49 kB 5.4 MB/s \n",
            "\u001b[K     |████████████████████████████████| 147 kB 48.9 MB/s \n",
            "\u001b[K     |████████████████████████████████| 112 kB 71.0 MB/s \n",
            "\u001b[?25h  Building wheel for covsirphy (PEP 517) ... \u001b[?25l\u001b[?25hdone\n",
            "  Building wheel for country-converter (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Building wheel for pyperclip (setup.py) ... \u001b[?25l\u001b[?25hdone\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<style type='text/css'>\n",
              ".datatable table.frame { margin-bottom: 0; }\n",
              ".datatable table.frame thead { border-bottom: none; }\n",
              ".datatable table.frame tr.coltypes td {  color: #FFFFFF;  line-height: 6px;  padding: 0 0.5em;}\n",
              ".datatable .bool    { background: #DDDD99; }\n",
              ".datatable .object  { background: #565656; }\n",
              ".datatable .int     { background: #5D9E5D; }\n",
              ".datatable .float   { background: #4040CC; }\n",
              ".datatable .str     { background: #CC4040; }\n",
              ".datatable .time    { background: #40CC40; }\n",
              ".datatable .row_index {  background: var(--jp-border-color3);  border-right: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  font-size: 9px;}\n",
              ".datatable .frame tbody td { text-align: left; }\n",
              ".datatable .frame tr.coltypes .row_index {  background: var(--jp-border-color0);}\n",
              ".datatable th:nth-child(2) { padding-left: 12px; }\n",
              ".datatable .hellipsis {  color: var(--jp-cell-editor-border-color);}\n",
              ".datatable .vellipsis {  background: var(--jp-layout-color0);  color: var(--jp-cell-editor-border-color);}\n",
              ".datatable .na {  color: var(--jp-cell-editor-border-color);  font-size: 80%;}\n",
              ".datatable .sp {  opacity: 0.25;}\n",
              ".datatable .footer { font-size: 9px; }\n",
              ".datatable .frame_dimensions {  background: var(--jp-border-color3);  border-top: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  display: inline-block;  opacity: 0.6;  padding: 1px 10px 1px 5px;}\n",
              "</style>\n"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ]
        },
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'2.24.0-omicron'"
            ]
          },
          "execution_count": 1,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from pprint import pprint\n",
        "import pandas as pd\n",
        "try:\n",
        "    import covsirphy as cs\n",
        "except ImportError:\n",
        "    !pip install --upgrade \"git+https://github.com/lisphilar/covid19-sir.git#egg=covsirphy\" -qq\n",
        "    import covsirphy as cs\n",
        "cs.__version__"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QH0AEUrT0ft1"
      },
      "source": [
        "## 1. Downloading datasets from recommended data \n",
        "We will download datasets from the following recommended data servers.\n",
        "\n",
        "* **COVID-19 Data Hub, https://covid19datahub.io/**\n",
        "    * Guidotti, E., Ardia, D., (2020), “COVID-19 Data Hub”, Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n",
        "    * The number of cases (JHU style)\n",
        "    * Population values in each country/province\n",
        "    * [Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)\n",
        "    * The number of tests\n",
        "* **Our World In Data, https://github.com/owid/covid-19-data/tree/master/public/data**\n",
        "    * Hasell, J., Mathieu, E., Beltekian, D. et al. A cross-country database of COVID-19 testing. Sci Data 7, 345 (2020). https://doi.org/10.1038/s41597-020-00688-8\n",
        "    * The number of tests\n",
        "    * The number of vaccinations\n",
        "    * The number of people who received vaccinations\n",
        "* **COVID-19 Open Data by Google Cloud Platform, https://github.com/GoogleCloudPlatform/covid-19-open-data**\n",
        "    * O. Wahltinez and others (2020), COVID-19 Open-Data: curating a fine-grained, global-scale data repository for SARS-CoV-2, Work in progress, https://goo.gle/covid-19-open-data\n",
        "    * percentage to baseline in visits\n",
        "    * Note: Please refer to [Google Terms of Service](https://policies.google.com/terms) in advance.\n",
        "* **World Bank Open Data, https://data.worldbank.org/**\n",
        "    * World Bank Group (2020), World Bank Open Data, https://data.worldbank.org/\n",
        "    * Population pyramid\n",
        "* **Datasets for CovsirPhy, https://github.com/lisphilar/covid19-sir/tree/master/data**\n",
        "    * Hirokazu Takaya (2020-2022), GitHub repository, COVID-19 dataset in Japan, https://github.com/lisphilar/covid19-sir/tree/master/data.\n",
        "    * The number of cases in Japan (total/prefectures)\n",
        "    * Metadata regarding Japan prefectures\n",
        "\n",
        "***\n",
        "\n",
        "How to request new data loader:  \n",
        "If you want to use a new dataset for your analysis, please kindly inform us using [GitHub Issues: Request new method of DataLoader class](https://github.com/lisphilar/covid19-sir/issues/new/?template=request-new-method-of-dataloader-class.md). Please read [Guideline of contribution](https://lisphilar.github.io/covid19-sir/CONTRIBUTING.html) in advance."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SxYNNSWF0ft1"
      },
      "source": [
        "### 1-1. With `DataEngineer` class\n",
        "We can use `DataEngineer().download()` for data downloading from recommended data servers as the quickest way."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RG16Z6wJ0ft1",
        "outputId": "46bf0c3d-dfb1-4719-8fc0-b08838125938"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Retrieving COVID-19 dataset from https://github.com/lisphilar/covid19-sir/data/\n",
            "Retrieving datasets from COVID-19 Data Hub https://covid19datahub.io/\n",
            "Retrieving datasets from COVID-19 Open Data by Google Cloud Platform https://github.com/GoogleCloudPlatform/covid-19-open-data\n",
            "Retrieving datasets from Our World In Data https://github.com/owid/covid-19-data/\n"
          ]
        }
      ],
      "source": [
        "eng = cs.DataEngineer()\n",
        "eng.download();"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "olESmSIm0ft2"
      },
      "source": [
        "We can get the all downloaded records as a `pandas.DataFrame` with `DataEngineer().all()` method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "veU-JhWE0ft3",
        "outputId": "9de3ae82-7c34-4865-c3a2-4725794c3018"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 210976 entries, 0 to 210975\n",
            "Data columns (total 36 columns):\n",
            " #   Column                               Non-Null Count   Dtype         \n",
            "---  ------                               --------------   -----         \n",
            " 0   ISO3                                 210976 non-null  category      \n",
            " 1   Province                             210976 non-null  category      \n",
            " 2   City                                 210976 non-null  category      \n",
            " 3   Date                                 210976 non-null  datetime64[ns]\n",
            " 4   Cancel_events                        167216 non-null  object        \n",
            " 5   Confirmed                            191571 non-null  object        \n",
            " 6   Contact_tracing                      167118 non-null  object        \n",
            " 7   Country                              208802 non-null  string        \n",
            " 8   Fatal                                175144 non-null  object        \n",
            " 9   Gatherings_restrictions              167213 non-null  object        \n",
            " 10  Information_campaigns                167169 non-null  object        \n",
            " 11  Internal_movement_restrictions       167187 non-null  object        \n",
            " 12  International_movement_restrictions  167198 non-null  object        \n",
            " 13  Mobility_grocery_and_pharmacy        111522 non-null  object        \n",
            " 14  Mobility_parks                       111438 non-null  object        \n",
            " 15  Mobility_residential                 111199 non-null  object        \n",
            " 16  Mobility_retail_and_recreation       111592 non-null  object        \n",
            " 17  Mobility_transit_stations            112482 non-null  object        \n",
            " 18  Mobility_workplaces                  112919 non-null  object        \n",
            " 19  Population                           207875 non-null  object        \n",
            " 20  Product                              108550 non-null  string        \n",
            " 21  Recovered                            71209 non-null   object        \n",
            " 22  School_closing                       167252 non-null  object        \n",
            " 23  Stay_home_restrictions               167169 non-null  object        \n",
            " 24  Stringency_index                     167086 non-null  object        \n",
            " 25  Testing_policy                       167146 non-null  object        \n",
            " 26  Tests                                84779 non-null   object        \n",
            " 27  Transport_closing                    167202 non-null  object        \n",
            " 28  Vaccinated_1st                       908 non-null     object        \n",
            " 29  Vaccinated_2nd                       908 non-null     object        \n",
            " 30  Vaccinated_3rd                       908 non-null     object        \n",
            " 31  Vaccinated_full                      45264 non-null   object        \n",
            " 32  Vaccinated_once                      47577 non-null   object        \n",
            " 33  Vaccinations                         50175 non-null   object        \n",
            " 34  Vaccinations_boosters                23398 non-null   object        \n",
            " 35  Workplace_closing                    167249 non-null  object        \n",
            "dtypes: category(3), datetime64[ns](1), object(30), string(2)\n",
            "memory usage: 53.9+ MB\n"
          ]
        }
      ],
      "source": [
        "all_df = eng.all()\n",
        "# Overview of the records\n",
        "all_df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rXI_-Szv0ft3"
      },
      "source": [
        "`DataEngineer.citations()` shows citations of the datasets."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f4rON2YT0ft3",
        "outputId": "826d992b-8aad-446e-c667-feda2b68d507"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Hirokazu Takaya (2020-2022), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan\n",
            "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n",
            "Hasell, J., Mathieu, E., Beltekian, D. et al. A cross-country database of COVID-19 testing. Sci Data 7, 345 (2020). https: //doi.org/10.1038/s41597-020-00688-8\n",
            "O. Wahltinez and others (2020), COVID-19 Open-Data: curating a fine-grained, global-scale data repository for SARS-CoV-2,  Work in progress, https://goo.gle/covid-19-open-data\n"
          ]
        }
      ],
      "source": [
        "print(\"\\n\".join(eng.citations()))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4Va72VKN0ft4"
      },
      "source": [
        "Note that, as default, `DataEngineer().download()` collects country-level data and save the datasets as CSV files in \"input\" (=`directory` argument of `DataEngineer()`) folder of the current directory. If the last modification time of the saved CSV files is within the last 12 (=`update_interval` argument of `DataEngineer()`) hours, the saved CSV files will be used as the database."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UQXWUfGV0ft4"
      },
      "source": [
        "For some countries (eg. Japan), province/state/prefecture level data is available and we can download it as follows."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "ZdJU3br70ft5",
        "outputId": "d8029f79-3f7c-4719-96a6-f23ec495a152"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Retrieving COVID-19 dataset from https://github.com/lisphilar/covid19-sir/data/\n",
            "Retrieving datasets from COVID-19 Data Hub https://covid19datahub.io/\n",
            "Retrieving datasets from COVID-19 Open Data by Google Cloud Platform https://github.com/GoogleCloudPlatform/covid-19-open-data\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-9b7bc8df-ccc9-42e7-8960-227a936c33db\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ISO3</th>\n",
              "      <th>Province</th>\n",
              "      <th>City</th>\n",
              "      <th>Date</th>\n",
              "      <th>Cancel_events</th>\n",
              "      <th>Confirmed</th>\n",
              "      <th>Contact_tracing</th>\n",
              "      <th>Country</th>\n",
              "      <th>Fatal</th>\n",
              "      <th>Gatherings_restrictions</th>\n",
              "      <th>...</th>\n",
              "      <th>Stay_home_restrictions</th>\n",
              "      <th>Stringency_index</th>\n",
              "      <th>Testing_policy</th>\n",
              "      <th>Tests</th>\n",
              "      <th>Transport_closing</th>\n",
              "      <th>Vaccinated_full</th>\n",
              "      <th>Vaccinated_once</th>\n",
              "      <th>Vaccinations</th>\n",
              "      <th>Vaccinations_boosters</th>\n",
              "      <th>Workplace_closing</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>JPN</td>\n",
              "      <td>Aichi</td>\n",
              "      <td>-</td>\n",
              "      <td>2020-01-15</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Japan</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-2.78</td>\n",
              "      <td>1.0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>0.0</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>JPN</td>\n",
              "      <td>Aichi</td>\n",
              "      <td>-</td>\n",
              "      <td>2020-01-16</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Japan</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-2.78</td>\n",
              "      <td>1.0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>0.0</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>JPN</td>\n",
              "      <td>Aichi</td>\n",
              "      <td>-</td>\n",
              "      <td>2020-01-17</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Japan</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-2.78</td>\n",
              "      <td>1.0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>0.0</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>JPN</td>\n",
              "      <td>Aichi</td>\n",
              "      <td>-</td>\n",
              "      <td>2020-01-18</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Japan</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-2.78</td>\n",
              "      <td>1.0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>0.0</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>JPN</td>\n",
              "      <td>Aichi</td>\n",
              "      <td>-</td>\n",
              "      <td>2020-01-19</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Japan</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-2.78</td>\n",
              "      <td>1.0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>0.0</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 26 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9b7bc8df-ccc9-42e7-8960-227a936c33db')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9b7bc8df-ccc9-42e7-8960-227a936c33db button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9b7bc8df-ccc9-42e7-8960-227a936c33db');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "  ISO3 Province City       Date Cancel_events  Confirmed Contact_tracing  \\\n",
              "0  JPN    Aichi    - 2020-01-15           0.0          0             1.0   \n",
              "1  JPN    Aichi    - 2020-01-16           0.0          0             1.0   \n",
              "2  JPN    Aichi    - 2020-01-17           0.0          0             2.0   \n",
              "3  JPN    Aichi    - 2020-01-18           0.0          0             2.0   \n",
              "4  JPN    Aichi    - 2020-01-19           0.0          0             2.0   \n",
              "\n",
              "  Country  Fatal Gatherings_restrictions  ... Stay_home_restrictions  \\\n",
              "0   Japan      0                     0.0  ...                    0.0   \n",
              "1   Japan      0                     0.0  ...                    0.0   \n",
              "2   Japan      0                     0.0  ...                    0.0   \n",
              "3   Japan      0                     0.0  ...                    0.0   \n",
              "4   Japan      0                     0.0  ...                    0.0   \n",
              "\n",
              "  Stringency_index Testing_policy  Tests Transport_closing Vaccinated_full  \\\n",
              "0            -2.78            1.0   <NA>               0.0            None   \n",
              "1            -2.78            1.0   <NA>               0.0            None   \n",
              "2            -2.78            1.0   <NA>               0.0            None   \n",
              "3            -2.78            1.0   <NA>               0.0            None   \n",
              "4            -2.78            1.0   <NA>               0.0            None   \n",
              "\n",
              "  Vaccinated_once Vaccinations Vaccinations_boosters Workplace_closing  \n",
              "0            None         None                  None               0.0  \n",
              "1            None         None                  None               0.0  \n",
              "2            None         None                  None               0.0  \n",
              "3            None         None                  None               0.0  \n",
              "4            None         None                  None               0.0  \n",
              "\n",
              "[5 rows x 26 columns]"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "eng_jpn = cs.DataEngineer()\n",
        "eng_jpn.download(country=\"Japan\")\n",
        "eng_jpn.all().head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TOFKVnfc0ft5"
      },
      "source": [
        "For some countries (eg. USA), city-level data is available and we can download it as follows."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 404
        },
        "id": "WpHe4r8Z0ft5",
        "outputId": "a28b00d0-b21d-4b05-d656-074cba58746e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Retrieving datasets from COVID-19 Data Hub https://covid19datahub.io/\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-884a2a8b-081b-43ef-9ad1-0052a01c64f7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ISO3</th>\n",
              "      <th>Province</th>\n",
              "      <th>City</th>\n",
              "      <th>Date</th>\n",
              "      <th>Cancel_events</th>\n",
              "      <th>Confirmed</th>\n",
              "      <th>Contact_tracing</th>\n",
              "      <th>Country</th>\n",
              "      <th>Fatal</th>\n",
              "      <th>Gatherings_restrictions</th>\n",
              "      <th>...</th>\n",
              "      <th>Mobility_workplaces</th>\n",
              "      <th>Population</th>\n",
              "      <th>Recovered</th>\n",
              "      <th>School_closing</th>\n",
              "      <th>Stay_home_restrictions</th>\n",
              "      <th>Stringency_index</th>\n",
              "      <th>Testing_policy</th>\n",
              "      <th>Tests</th>\n",
              "      <th>Transport_closing</th>\n",
              "      <th>Workplace_closing</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>USA</td>\n",
              "      <td>Alabama</td>\n",
              "      <td>Autauga</td>\n",
              "      <td>2020-03-24</td>\n",
              "      <td>-2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>United States</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-4.0</td>\n",
              "      <td>...</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>55869.0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>3.0</td>\n",
              "      <td>-2.0</td>\n",
              "      <td>-68.98</td>\n",
              "      <td>1.0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>-3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>USA</td>\n",
              "      <td>Alabama</td>\n",
              "      <td>Autauga</td>\n",
              "      <td>2020-03-25</td>\n",
              "      <td>-2.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>United States</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-4.0</td>\n",
              "      <td>...</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>55869.0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>3.0</td>\n",
              "      <td>-2.0</td>\n",
              "      <td>-68.98</td>\n",
              "      <td>1.0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>-3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>USA</td>\n",
              "      <td>Alabama</td>\n",
              "      <td>Autauga</td>\n",
              "      <td>2020-03-26</td>\n",
              "      <td>-2.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>United States</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-4.0</td>\n",
              "      <td>...</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>55869.0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>3.0</td>\n",
              "      <td>-2.0</td>\n",
              "      <td>-68.98</td>\n",
              "      <td>1.0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>-3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>USA</td>\n",
              "      <td>Alabama</td>\n",
              "      <td>Autauga</td>\n",
              "      <td>2020-03-27</td>\n",
              "      <td>-2.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>United States</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-4.0</td>\n",
              "      <td>...</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>55869.0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>3.0</td>\n",
              "      <td>-2.0</td>\n",
              "      <td>-68.98</td>\n",
              "      <td>1.0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>-3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>USA</td>\n",
              "      <td>Alabama</td>\n",
              "      <td>Autauga</td>\n",
              "      <td>2020-03-28</td>\n",
              "      <td>2.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>United States</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-4.0</td>\n",
              "      <td>...</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>55869.0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>3.0</td>\n",
              "      <td>-2.0</td>\n",
              "      <td>-73.61</td>\n",
              "      <td>1.0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 28 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-884a2a8b-081b-43ef-9ad1-0052a01c64f7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-884a2a8b-081b-43ef-9ad1-0052a01c64f7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-884a2a8b-081b-43ef-9ad1-0052a01c64f7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "  ISO3 Province     City       Date Cancel_events Confirmed Contact_tracing  \\\n",
              "0  USA  Alabama  Autauga 2020-03-24          -2.0       1.0             1.0   \n",
              "1  USA  Alabama  Autauga 2020-03-25          -2.0       4.0             1.0   \n",
              "2  USA  Alabama  Autauga 2020-03-26          -2.0       6.0             1.0   \n",
              "3  USA  Alabama  Autauga 2020-03-27          -2.0       6.0             1.0   \n",
              "4  USA  Alabama  Autauga 2020-03-28           2.0       6.0             1.0   \n",
              "\n",
              "         Country Fatal Gatherings_restrictions  ... Mobility_workplaces  \\\n",
              "0  United States   0.0                    -4.0  ...                <NA>   \n",
              "1  United States   0.0                    -4.0  ...                <NA>   \n",
              "2  United States   0.0                    -4.0  ...                <NA>   \n",
              "3  United States   0.0                    -4.0  ...                <NA>   \n",
              "4  United States   0.0                    -4.0  ...                <NA>   \n",
              "\n",
              "  Population Recovered School_closing Stay_home_restrictions Stringency_index  \\\n",
              "0    55869.0      <NA>            3.0                   -2.0           -68.98   \n",
              "1    55869.0      <NA>            3.0                   -2.0           -68.98   \n",
              "2    55869.0      <NA>            3.0                   -2.0           -68.98   \n",
              "3    55869.0      <NA>            3.0                   -2.0           -68.98   \n",
              "4    55869.0      <NA>            3.0                   -2.0           -73.61   \n",
              "\n",
              "  Testing_policy Tests Transport_closing Workplace_closing  \n",
              "0            1.0  <NA>              -1.0              -3.0  \n",
              "1            1.0  <NA>              -1.0              -3.0  \n",
              "2            1.0  <NA>              -1.0              -3.0  \n",
              "3            1.0  <NA>              -1.0              -3.0  \n",
              "4            1.0  <NA>              -1.0               3.0  \n",
              "\n",
              "[5 rows x 28 columns]"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "eng_alabama = cs.DataEngineer()\n",
        "eng_alabama.download(country=\"USA\", province=\"Alabama\")\n",
        "eng_alabama.all().head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XTYFC2gp0ft6"
      },
      "source": [
        "### 1-2. With `DataDownloader` class\n",
        "`DataEngineer` class is suggested because it has data cleaning methods and so on, but we can use `DataDownloader` class for data downloading."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "eU11PgvY0ft6"
      },
      "outputs": [],
      "source": [
        "dl = cs.DataDownloader()\n",
        "dl_df = dl.layer(country=None, province=None)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xWgMq6Cp0ft6",
        "outputId": "14aeb714-43aa-4c4a-beb8-ad336c3d07cc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 210976 entries, 0 to 210975\n",
            "Data columns (total 36 columns):\n",
            " #   Column                               Non-Null Count   Dtype         \n",
            "---  ------                               --------------   -----         \n",
            " 0   ISO3                                 210976 non-null  string        \n",
            " 1   Province                             210976 non-null  string        \n",
            " 2   City                                 210976 non-null  string        \n",
            " 3   Date                                 210976 non-null  datetime64[ns]\n",
            " 4   Cancel_events                        167216 non-null  Float64       \n",
            " 5   Confirmed                            191571 non-null  Float64       \n",
            " 6   Contact_tracing                      167118 non-null  Float64       \n",
            " 7   Country                              208802 non-null  string        \n",
            " 8   Fatal                                175144 non-null  Float64       \n",
            " 9   Gatherings_restrictions              167213 non-null  Float64       \n",
            " 10  Information_campaigns                167169 non-null  Float64       \n",
            " 11  Internal_movement_restrictions       167187 non-null  Float64       \n",
            " 12  International_movement_restrictions  167198 non-null  Float64       \n",
            " 13  Mobility_grocery_and_pharmacy        111522 non-null  Float64       \n",
            " 14  Mobility_parks                       111438 non-null  Float64       \n",
            " 15  Mobility_residential                 111199 non-null  Float64       \n",
            " 16  Mobility_retail_and_recreation       111592 non-null  Float64       \n",
            " 17  Mobility_transit_stations            112482 non-null  Float64       \n",
            " 18  Mobility_workplaces                  112919 non-null  Float64       \n",
            " 19  Population                           207875 non-null  Float64       \n",
            " 20  Product                              108550 non-null  string        \n",
            " 21  Recovered                            71209 non-null   Float64       \n",
            " 22  School_closing                       167252 non-null  Float64       \n",
            " 23  Stay_home_restrictions               167169 non-null  Float64       \n",
            " 24  Stringency_index                     167086 non-null  Float64       \n",
            " 25  Testing_policy                       167146 non-null  Float64       \n",
            " 26  Tests                                84779 non-null   Float64       \n",
            " 27  Transport_closing                    167202 non-null  Float64       \n",
            " 28  Vaccinated_1st                       908 non-null     Float64       \n",
            " 29  Vaccinated_2nd                       908 non-null     Float64       \n",
            " 30  Vaccinated_3rd                       908 non-null     Float64       \n",
            " 31  Vaccinated_full                      45264 non-null   Float64       \n",
            " 32  Vaccinated_once                      47577 non-null   Float64       \n",
            " 33  Vaccinations                         50175 non-null   Float64       \n",
            " 34  Vaccinations_boosters                23398 non-null   Float64       \n",
            " 35  Workplace_closing                    167249 non-null  Float64       \n",
            "dtypes: Float64(30), datetime64[ns](1), string(5)\n",
            "memory usage: 64.0 MB\n"
          ]
        }
      ],
      "source": [
        "# Overview of the records\n",
        "dl_df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "efzYaK0f4k39"
      },
      "source": [
        "Note that ISO3/Province/City columns have string data instead of categorical data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vqj_VfnR0ft6",
        "outputId": "4f0e7637-cd8f-4d29-9576-4c886c01f1f6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Hirokazu Takaya (2020-2022), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan\n",
            "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n",
            "Hasell, J., Mathieu, E., Beltekian, D. et al. A cross-country database of COVID-19 testing. Sci Data 7, 345 (2020). https: //doi.org/10.1038/s41597-020-00688-8\n",
            "O. Wahltinez and others (2020), COVID-19 Open-Data: curating a fine-grained, global-scale data repository for SARS-CoV-2,  Work in progress, https://goo.gle/covid-19-open-data\n"
          ]
        }
      ],
      "source": [
        "# Citations\n",
        "print(\"\\n\".join(dl.citations()))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OT9RbzGV0ft7"
      },
      "source": [
        "## 2. Reading `pandas.DataFrame`\n",
        "We may need to use our own datasets for analysis because the dataset is not included in the recommended data servers. `DataEngineer().register()` registers new datasets of `pandas.DataFrame` format."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mKhWAUWn0ft7"
      },
      "source": [
        "At first, we will prepare the new dataset as `pandas.DataFrame`. Just as a demonstration, we use [COVID-19 dataset in Japan](https://github.com/lisphilar/covid19-sir/tree/master/data). (Note that this is included in the recommended servers and the following is usually un-necessary.)\n",
        "\n",
        "Hirokazu Takaya (2020-2022), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0lx_4keJ0ft7"
      },
      "source": [
        "Country-level data:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "PdPd010x0ft7",
        "outputId": "1c0fd704-7fd3-45f6-dec0-4cd3d29ae599"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-67a2b240-150f-42da-bc03-f9495fcadd91\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Location</th>\n",
              "      <th>Positive</th>\n",
              "      <th>Tested</th>\n",
              "      <th>Symptomatic</th>\n",
              "      <th>Asymptomatic</th>\n",
              "      <th>Sym-unknown</th>\n",
              "      <th>Hosp_require</th>\n",
              "      <th>Hosp_mild</th>\n",
              "      <th>Hosp_severe</th>\n",
              "      <th>Hosp_unknown</th>\n",
              "      <th>Hosp_waiting</th>\n",
              "      <th>Discharged</th>\n",
              "      <th>Fatal</th>\n",
              "      <th>Vaccinated_1st</th>\n",
              "      <th>Vaccinated_2nd</th>\n",
              "      <th>Vaccinated_3rd</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2696</th>\n",
              "      <td>2022-08-05</td>\n",
              "      <td>Airport</td>\n",
              "      <td>20761</td>\n",
              "      <td>2329337.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>266.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>20487</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2697</th>\n",
              "      <td>2022-08-05</td>\n",
              "      <td>Returnee</td>\n",
              "      <td>15</td>\n",
              "      <td>829.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2698</th>\n",
              "      <td>2022-08-06</td>\n",
              "      <td>Domestic</td>\n",
              "      <td>13814286</td>\n",
              "      <td>62132223.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1911163.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>567</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>11769221</td>\n",
              "      <td>33340</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2699</th>\n",
              "      <td>2022-08-06</td>\n",
              "      <td>Airport</td>\n",
              "      <td>20798</td>\n",
              "      <td>2329840.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>258.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>20532</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2700</th>\n",
              "      <td>2022-08-06</td>\n",
              "      <td>Returnee</td>\n",
              "      <td>15</td>\n",
              "      <td>829.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-67a2b240-150f-42da-bc03-f9495fcadd91')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-67a2b240-150f-42da-bc03-f9495fcadd91 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-67a2b240-150f-42da-bc03-f9495fcadd91');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            Date  Location  Positive      Tested  Symptomatic  Asymptomatic  \\\n",
              "2696  2022-08-05   Airport     20761   2329337.0          NaN           NaN   \n",
              "2697  2022-08-05  Returnee        15       829.0          NaN           NaN   \n",
              "2698  2022-08-06  Domestic  13814286  62132223.0          NaN           NaN   \n",
              "2699  2022-08-06   Airport     20798   2329840.0          NaN           NaN   \n",
              "2700  2022-08-06  Returnee        15       829.0          NaN           NaN   \n",
              "\n",
              "      Sym-unknown  Hosp_require  Hosp_mild  Hosp_severe  Hosp_unknown  \\\n",
              "2696          NaN         266.0        NaN            0           NaN   \n",
              "2697          NaN           0.0        NaN            0           NaN   \n",
              "2698          NaN     1911163.0        NaN          567           NaN   \n",
              "2699          NaN         258.0        NaN            0           NaN   \n",
              "2700          NaN           0.0        NaN            0           NaN   \n",
              "\n",
              "      Hosp_waiting  Discharged  Fatal Vaccinated_1st  Vaccinated_2nd  \\\n",
              "2696           NaN       20487      8              0             0.0   \n",
              "2697           NaN          15      0              0             0.0   \n",
              "2698           NaN    11769221  33340              0             0.0   \n",
              "2699           NaN       20532      8              0             0.0   \n",
              "2700           NaN          15      0              0             0.0   \n",
              "\n",
              "      Vaccinated_3rd  \n",
              "2696             0.0  \n",
              "2697             0.0  \n",
              "2698             0.0  \n",
              "2699             0.0  \n",
              "2700             0.0  "
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "c_url = \"https://raw.githubusercontent.com/lisphilar/covid19-sir/master/data/japan/covid_jpn_total.csv\"\n",
        "c_df = pd.read_csv(c_url, dayfirst=False)\n",
        "# Check columns of the pandas.DataFrame\n",
        "c_df.tail()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wi9cwGHH0ft7"
      },
      "source": [
        "Prefecture-level data:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "gFQLGs2g0ft7",
        "outputId": "6e09e80e-6d00-43e2-8b00-e721148267eb"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-a760b6e3-817a-44f4-8e24-e01c3425d858\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Prefecture</th>\n",
              "      <th>Positive</th>\n",
              "      <th>Tested</th>\n",
              "      <th>Discharged</th>\n",
              "      <th>Fatal</th>\n",
              "      <th>Hosp_require</th>\n",
              "      <th>Hosp_severe</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>40932</th>\n",
              "      <td>2022-08-05</td>\n",
              "      <td>Kumamoto</td>\n",
              "      <td>205812</td>\n",
              "      <td>406426.0</td>\n",
              "      <td>174968.0</td>\n",
              "      <td>399.0</td>\n",
              "      <td>30445.0</td>\n",
              "      <td>10.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40933</th>\n",
              "      <td>2022-08-05</td>\n",
              "      <td>Oita</td>\n",
              "      <td>101584</td>\n",
              "      <td>735693.0</td>\n",
              "      <td>86886.0</td>\n",
              "      <td>196.0</td>\n",
              "      <td>14502.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40934</th>\n",
              "      <td>2022-08-05</td>\n",
              "      <td>Miyazaki</td>\n",
              "      <td>104561</td>\n",
              "      <td>212129.0</td>\n",
              "      <td>85383.0</td>\n",
              "      <td>184.0</td>\n",
              "      <td>18775.0</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40935</th>\n",
              "      <td>2022-08-05</td>\n",
              "      <td>Kagoshima</td>\n",
              "      <td>163254</td>\n",
              "      <td>556885.0</td>\n",
              "      <td>131753.0</td>\n",
              "      <td>253.0</td>\n",
              "      <td>27914.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40936</th>\n",
              "      <td>2022-08-05</td>\n",
              "      <td>Okinawa</td>\n",
              "      <td>384610</td>\n",
              "      <td>1055142.0</td>\n",
              "      <td>343072.0</td>\n",
              "      <td>516.0</td>\n",
              "      <td>40829.0</td>\n",
              "      <td>24.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a760b6e3-817a-44f4-8e24-e01c3425d858')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a760b6e3-817a-44f4-8e24-e01c3425d858 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a760b6e3-817a-44f4-8e24-e01c3425d858');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "             Date Prefecture  Positive     Tested  Discharged  Fatal  \\\n",
              "40932  2022-08-05   Kumamoto    205812   406426.0    174968.0  399.0   \n",
              "40933  2022-08-05       Oita    101584   735693.0     86886.0  196.0   \n",
              "40934  2022-08-05   Miyazaki    104561   212129.0     85383.0  184.0   \n",
              "40935  2022-08-05  Kagoshima    163254   556885.0    131753.0  253.0   \n",
              "40936  2022-08-05    Okinawa    384610  1055142.0    343072.0  516.0   \n",
              "\n",
              "       Hosp_require  Hosp_severe  \n",
              "40932       30445.0         10.0  \n",
              "40933       14502.0          1.0  \n",
              "40934       18775.0          7.0  \n",
              "40935       27914.0          2.0  \n",
              "40936       40829.0         24.0  "
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "p_url = \"https://raw.githubusercontent.com/lisphilar/covid19-sir/master/data/japan/covid_jpn_prefecture.csv\"\n",
        "p_df = pd.read_csv(p_url, dayfirst=False)\n",
        "# Check columns of the pandas.DataFrame\n",
        "p_df.tail()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dZng7lhJ0ft7"
      },
      "source": [
        "We may create a `DataEngineer` instance, specifying the layer of location names. However, there is a discrepancy of layer names. `c_df` had \"Location\" layer and `p_df` had \"Prefecture\" layer. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1OWNFwOG0ft8",
        "outputId": "3407dc28-c0d7-4f20-f5c6-a347b11b5997"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Index(['Date', 'Location', 'Positive', 'Tested', 'Symptomatic', 'Asymptomatic',\n",
            "       'Sym-unknown', 'Hosp_require', 'Hosp_mild', 'Hosp_severe',\n",
            "       'Hosp_unknown', 'Hosp_waiting', 'Discharged', 'Fatal', 'Vaccinated_1st',\n",
            "       'Vaccinated_2nd', 'Vaccinated_3rd'],\n",
            "      dtype='object')\n",
            "Index(['Date', 'Prefecture', 'Positive', 'Tested', 'Discharged', 'Fatal',\n",
            "       'Hosp_require', 'Hosp_severe'],\n",
            "      dtype='object')\n"
          ]
        }
      ],
      "source": [
        "print(c_df.columns)\n",
        "print(p_df.columns)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mr81cc9e51o3",
        "outputId": "19be41d0-13f6-4a78-b3fd-fd6fa5180506"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['Domestic' 'Returnee' 'Airport']\n"
          ]
        }
      ],
      "source": [
        "print(c_df.Location.unique())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c-ize7yg47WM"
      },
      "source": [
        "To make country-level dataset, calculate total values of Domestic/Returnee/Airport."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "DUdncF_80ft8",
        "outputId": "6b6a289b-67b7-4847-8709-908c4becd094"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-58bdf828-5040-4f91-93d4-edbb7422435a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Country</th>\n",
              "      <th>Prefecture</th>\n",
              "      <th>Positive</th>\n",
              "      <th>Tested</th>\n",
              "      <th>Symptomatic</th>\n",
              "      <th>Asymptomatic</th>\n",
              "      <th>Sym-unknown</th>\n",
              "      <th>Hosp_require</th>\n",
              "      <th>Hosp_mild</th>\n",
              "      <th>Hosp_severe</th>\n",
              "      <th>Hosp_unknown</th>\n",
              "      <th>Hosp_waiting</th>\n",
              "      <th>Discharged</th>\n",
              "      <th>Fatal</th>\n",
              "      <th>Vaccinated_2nd</th>\n",
              "      <th>Vaccinated_3rd</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>903</th>\n",
              "      <td>2022-08-02</td>\n",
              "      <td>Japan</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>12917500</td>\n",
              "      <td>63056027.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1730336.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>464</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11049714</td>\n",
              "      <td>32694</td>\n",
              "      <td>0.0</td>\n",
              "      <td>79870182.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>904</th>\n",
              "      <td>2022-08-03</td>\n",
              "      <td>Japan</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>13113301</td>\n",
              "      <td>63387469.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1734592.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>478</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11217611</td>\n",
              "      <td>32819</td>\n",
              "      <td>0.0</td>\n",
              "      <td>79947833.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>905</th>\n",
              "      <td>2022-08-04</td>\n",
              "      <td>Japan</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>13344898</td>\n",
              "      <td>63817464.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1828642.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>516</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11397919</td>\n",
              "      <td>32976</td>\n",
              "      <td>0.0</td>\n",
              "      <td>80020648.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>906</th>\n",
              "      <td>2022-08-05</td>\n",
              "      <td>Japan</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>13598290</td>\n",
              "      <td>64104711.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1876343.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>556</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11586379</td>\n",
              "      <td>33159</td>\n",
              "      <td>0.0</td>\n",
              "      <td>80084683.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>907</th>\n",
              "      <td>2022-08-06</td>\n",
              "      <td>Japan</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>13835099</td>\n",
              "      <td>64462892.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1911421.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>567</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11789768</td>\n",
              "      <td>33348</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-58bdf828-5040-4f91-93d4-edbb7422435a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-58bdf828-5040-4f91-93d4-edbb7422435a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-58bdf828-5040-4f91-93d4-edbb7422435a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "           Date Country Prefecture  Positive      Tested  Symptomatic  \\\n",
              "903  2022-08-02   Japan       <NA>  12917500  63056027.0          0.0   \n",
              "904  2022-08-03   Japan       <NA>  13113301  63387469.0          0.0   \n",
              "905  2022-08-04   Japan       <NA>  13344898  63817464.0          0.0   \n",
              "906  2022-08-05   Japan       <NA>  13598290  64104711.0          0.0   \n",
              "907  2022-08-06   Japan       <NA>  13835099  64462892.0          0.0   \n",
              "\n",
              "     Asymptomatic  Sym-unknown  Hosp_require  Hosp_mild  Hosp_severe  \\\n",
              "903           0.0          0.0     1730336.0        0.0          464   \n",
              "904           0.0          0.0     1734592.0        0.0          478   \n",
              "905           0.0          0.0     1828642.0        0.0          516   \n",
              "906           0.0          0.0     1876343.0        0.0          556   \n",
              "907           0.0          0.0     1911421.0        0.0          567   \n",
              "\n",
              "     Hosp_unknown  Hosp_waiting  Discharged  Fatal  Vaccinated_2nd  \\\n",
              "903           0.0           0.0    11049714  32694             0.0   \n",
              "904           0.0           0.0    11217611  32819             0.0   \n",
              "905           0.0           0.0    11397919  32976             0.0   \n",
              "906           0.0           0.0    11586379  33159             0.0   \n",
              "907           0.0           0.0    11789768  33348             0.0   \n",
              "\n",
              "     Vaccinated_3rd  \n",
              "903      79870182.0  \n",
              "904      79947833.0  \n",
              "905      80020648.0  \n",
              "906      80084683.0  \n",
              "907             0.0  "
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "country_df = c_df.groupby(\"Date\").sum().reset_index()\n",
        "country_df.insert(1, \"Country\", \"Japan\")\n",
        "country_df.insert(2, \"Prefecture\", pd.NA)\n",
        "country_df.tail()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Io9Qlh2t7uHB"
      },
      "source": [
        "To make prefecture-level data, add \"Country\" column."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "-_yGoyb079Yl",
        "outputId": "c53256c2-6a7f-4161-c26e-2c34153c72c0"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-ef765450-fbf3-406d-a19b-87e747802588\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Country</th>\n",
              "      <th>Prefecture</th>\n",
              "      <th>Positive</th>\n",
              "      <th>Tested</th>\n",
              "      <th>Discharged</th>\n",
              "      <th>Fatal</th>\n",
              "      <th>Hosp_require</th>\n",
              "      <th>Hosp_severe</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>40932</th>\n",
              "      <td>2022-08-05</td>\n",
              "      <td>Japan</td>\n",
              "      <td>Kumamoto</td>\n",
              "      <td>205812</td>\n",
              "      <td>406426.0</td>\n",
              "      <td>174968.0</td>\n",
              "      <td>399.0</td>\n",
              "      <td>30445.0</td>\n",
              "      <td>10.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40933</th>\n",
              "      <td>2022-08-05</td>\n",
              "      <td>Japan</td>\n",
              "      <td>Oita</td>\n",
              "      <td>101584</td>\n",
              "      <td>735693.0</td>\n",
              "      <td>86886.0</td>\n",
              "      <td>196.0</td>\n",
              "      <td>14502.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40934</th>\n",
              "      <td>2022-08-05</td>\n",
              "      <td>Japan</td>\n",
              "      <td>Miyazaki</td>\n",
              "      <td>104561</td>\n",
              "      <td>212129.0</td>\n",
              "      <td>85383.0</td>\n",
              "      <td>184.0</td>\n",
              "      <td>18775.0</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40935</th>\n",
              "      <td>2022-08-05</td>\n",
              "      <td>Japan</td>\n",
              "      <td>Kagoshima</td>\n",
              "      <td>163254</td>\n",
              "      <td>556885.0</td>\n",
              "      <td>131753.0</td>\n",
              "      <td>253.0</td>\n",
              "      <td>27914.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40936</th>\n",
              "      <td>2022-08-05</td>\n",
              "      <td>Japan</td>\n",
              "      <td>Okinawa</td>\n",
              "      <td>384610</td>\n",
              "      <td>1055142.0</td>\n",
              "      <td>343072.0</td>\n",
              "      <td>516.0</td>\n",
              "      <td>40829.0</td>\n",
              "      <td>24.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ef765450-fbf3-406d-a19b-87e747802588')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ef765450-fbf3-406d-a19b-87e747802588 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ef765450-fbf3-406d-a19b-87e747802588');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "             Date Country Prefecture  Positive     Tested  Discharged  Fatal  \\\n",
              "40932  2022-08-05   Japan   Kumamoto    205812   406426.0    174968.0  399.0   \n",
              "40933  2022-08-05   Japan       Oita    101584   735693.0     86886.0  196.0   \n",
              "40934  2022-08-05   Japan   Miyazaki    104561   212129.0     85383.0  184.0   \n",
              "40935  2022-08-05   Japan  Kagoshima    163254   556885.0    131753.0  253.0   \n",
              "40936  2022-08-05   Japan    Okinawa    384610  1055142.0    343072.0  516.0   \n",
              "\n",
              "       Hosp_require  Hosp_severe  \n",
              "40932       30445.0         10.0  \n",
              "40933       14502.0          1.0  \n",
              "40934       18775.0          7.0  \n",
              "40935       27914.0          2.0  \n",
              "40936       40829.0         24.0  "
            ]
          },
          "execution_count": 15,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "prefecture_df = p_df.copy()\n",
        "prefecture_df.insert(1, \"Country\", \"Japan\")\n",
        "prefecture_df.tail()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GRU7lCdv8LMi"
      },
      "source": [
        "Create `DataEngineer` instance and register datasets."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 322
        },
        "id": "2tUaYxzA8J-r",
        "outputId": "c22bbe89-0a8b-42eb-8911-d1ddefefa160"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-b647331f-7b14-41ac-872b-7ff9288cbb7e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Prefecture</th>\n",
              "      <th>Date</th>\n",
              "      <th>Asymptomatic</th>\n",
              "      <th>Discharged</th>\n",
              "      <th>Fatal</th>\n",
              "      <th>Hosp_mild</th>\n",
              "      <th>Hosp_require</th>\n",
              "      <th>Hosp_severe</th>\n",
              "      <th>Hosp_unknown</th>\n",
              "      <th>Hosp_waiting</th>\n",
              "      <th>Positive</th>\n",
              "      <th>Sym-unknown</th>\n",
              "      <th>Symptomatic</th>\n",
              "      <th>Tested</th>\n",
              "      <th>Vaccinated_2nd</th>\n",
              "      <th>Vaccinated_3rd</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>41840</th>\n",
              "      <td>JPN</td>\n",
              "      <td>Yamanashi</td>\n",
              "      <td>2022-08-01</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>42825</td>\n",
              "      <td>75</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>7489</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>50301</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>415382</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41841</th>\n",
              "      <td>JPN</td>\n",
              "      <td>Yamanashi</td>\n",
              "      <td>2022-08-02</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>43702</td>\n",
              "      <td>77</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>7135</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>50825</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>415382</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41842</th>\n",
              "      <td>JPN</td>\n",
              "      <td>Yamanashi</td>\n",
              "      <td>2022-08-03</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>44852</td>\n",
              "      <td>77</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>7017</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>51880</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>415382</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41843</th>\n",
              "      <td>JPN</td>\n",
              "      <td>Yamanashi</td>\n",
              "      <td>2022-08-04</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>45755</td>\n",
              "      <td>78</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>7546</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>53316</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>415382</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41844</th>\n",
              "      <td>JPN</td>\n",
              "      <td>Yamanashi</td>\n",
              "      <td>2022-08-05</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>46789</td>\n",
              "      <td>78</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>8092</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>54896</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>429374</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b647331f-7b14-41ac-872b-7ff9288cbb7e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b647331f-7b14-41ac-872b-7ff9288cbb7e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b647331f-7b14-41ac-872b-7ff9288cbb7e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "      Country Prefecture       Date  Asymptomatic  Discharged  Fatal  \\\n",
              "41840     JPN  Yamanashi 2022-08-01          <NA>       42825     75   \n",
              "41841     JPN  Yamanashi 2022-08-02          <NA>       43702     77   \n",
              "41842     JPN  Yamanashi 2022-08-03          <NA>       44852     77   \n",
              "41843     JPN  Yamanashi 2022-08-04          <NA>       45755     78   \n",
              "41844     JPN  Yamanashi 2022-08-05          <NA>       46789     78   \n",
              "\n",
              "       Hosp_mild  Hosp_require  Hosp_severe  Hosp_unknown  Hosp_waiting  \\\n",
              "41840       <NA>          7489            0          <NA>          <NA>   \n",
              "41841       <NA>          7135            0          <NA>          <NA>   \n",
              "41842       <NA>          7017            0          <NA>          <NA>   \n",
              "41843       <NA>          7546            0          <NA>          <NA>   \n",
              "41844       <NA>          8092            0          <NA>          <NA>   \n",
              "\n",
              "       Positive  Sym-unknown  Symptomatic  Tested  Vaccinated_2nd  \\\n",
              "41840     50301         <NA>         <NA>  415382            <NA>   \n",
              "41841     50825         <NA>         <NA>  415382            <NA>   \n",
              "41842     51880         <NA>         <NA>  415382            <NA>   \n",
              "41843     53316         <NA>         <NA>  415382            <NA>   \n",
              "41844     54896         <NA>         <NA>  429374            <NA>   \n",
              "\n",
              "       Vaccinated_3rd  \n",
              "41840            <NA>  \n",
              "41841            <NA>  \n",
              "41842            <NA>  \n",
              "41843            <NA>  \n",
              "41844            <NA>  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "New country-level data\n",
            "New prefecture-level data\n"
          ]
        }
      ],
      "source": [
        "# Set layers and specify layer name of country (which will be converted to ISO3 code for standardization)\n",
        "eng_own = cs.DataEngineer(layers=[\"Country\", \"Prefecture\"], country=\"Country\")\n",
        "# Country-level data\n",
        "eng_own.register(data=country_df, citations=\"New country-level data\", dayfirst=False)\n",
        "# Prefecture-level data\n",
        "eng_own.register(data=prefecture_df, citations=\"New prefecture-level data\", dayfirst=False)\n",
        "# Show data\n",
        "display(eng_own.all().tail())\n",
        "# Show citations\n",
        "print(\"\\n\".join(eng_own.citations()))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Data loading in Kaggle Notebook\n",
        "\n",
        "We can use the recommended datasets in [Kaggle](https://www.kaggle.com/) Notebook. The datasets are saved in \"/kaggle/input/\" directory. Additionally, we can use Kaggle Datasets (CSV files) with `covsirphy` in Kaggle Notebook.\n",
        "\n",
        "Note:  \n",
        "If you have Kaggle API, you can download Kaggle datasets to your local environment by updating and executing [input.py](https://github.com/lisphilar/covid19-sir/blob/master/input.py) script. CSV files will be saved in \"/kaggle/input/\" directory.\n",
        "\n",
        "Kaggle API:  \n",
        "Move to account page of Kaggle and download \"kaggle.json\" by selecting \"API > Create New API Token\" button. Copy the json file to the top directory of the local repository or \"~/.kaggle\". Please refer to [How to Use Kaggle: Public API](https://www.kaggle.com/docs/api) and [stackoverflow: documentation for Kaggle API *within* python?](https://stackoverflow.com/questions/55934733/documentation-for-kaggle-api-within-python#:~:text=Here%20are%20the%20steps%20involved%20in%20using%20the%20Kaggle%20API%20from%20Python.&text=Go%20to%20your%20Kaggle%20account,json%20will%20be%20downloaded)\n",
        "\n",
        "### Acknowledgement\n",
        "\n",
        "In Feb2020, CovsirPhy project started in Kaggle platform with [COVID-19 data with SIR model](https://www.kaggle.com/lisphilar/covid-19-data-with-sir-model) notebook using the following datasets.\n",
        "\n",
        "- The number of cases (JHU) and linelist: [Novel Corona Virus 2019 Dataset by SRK](https://www.kaggle.com/sudalairajkumar/novel-corona-virus-2019-dataset)\n",
        "- Population in each country:  [covid19 global forecasting: locations population by Dmitry A. Grechka](https://www.kaggle.com/dgrechka/covid19-global-forecasting-locations-population)\n",
        "- The number of cases in Japan: [COVID-19 dataset in Japan by Lisphilar](https://www.kaggle.com/lisphilar/covid19-dataset-in-japan)\n",
        "\n",
        "Best Regards.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jaOBElU50ft8"
      },
      "source": [
        "## 3. Generator of sample data with SIR-derived ODE model\n",
        "CovsirPhy can generate sample data with subclasses of `ODEModel` and `Dynamics` class. Refer to the followings."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ak6-zmPJ_0fO"
      },
      "source": [
        "### 3.1 Sample data of one-phase ODE model\n",
        "Regarding ODE models, please refer to **[TBC]**. Here, we will create a sample data with one-phase SIR model and tau value 1440 min, the first date 01Jan2022, the last date 30Jun2022. ODE parameter values are preset."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PXwvK4Dg_zgh",
        "outputId": "a6e82877-289b-4c65-b563-c2604ce2c865"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "{'date_range': ('01Jan2022', '30Jun2022'),\n",
            " 'initial_dict': {'Fatal or Recovered': 0,\n",
            "                  'Infected': 1000,\n",
            "                  'Susceptible': 999000},\n",
            " 'param_dict': {'rho': 0.2, 'sigma': 0.075},\n",
            " 'tau': 1440}\n"
          ]
        }
      ],
      "source": [
        "# Create solver with preset\n",
        "model = cs.SIRModel.from_sample(date_range=(\"01Jan2022\", \"30Jun2022\"), tau=1440)\n",
        "# Show settings\n",
        "pprint(model.settings())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D3yr3a0YCWQw"
      },
      "source": [
        "Solve the ODE model with `ODEModel().solve()` method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "GHtEMTivCUIB",
        "outputId": "00d517b2-1d30-413b-de1a-e207e4f3f46b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-d016ba07-f2fb-4242-8e65-dfbbd95bcbe2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Susceptible</th>\n",
              "      <th>Infected</th>\n",
              "      <th>Fatal or Recovered</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2022-01-01</th>\n",
              "      <td>999000</td>\n",
              "      <td>1000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-02</th>\n",
              "      <td>998787</td>\n",
              "      <td>1133</td>\n",
              "      <td>80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-03</th>\n",
              "      <td>998546</td>\n",
              "      <td>1283</td>\n",
              "      <td>170</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-04</th>\n",
              "      <td>998273</td>\n",
              "      <td>1454</td>\n",
              "      <td>273</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-05</th>\n",
              "      <td>997964</td>\n",
              "      <td>1647</td>\n",
              "      <td>389</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d016ba07-f2fb-4242-8e65-dfbbd95bcbe2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d016ba07-f2fb-4242-8e65-dfbbd95bcbe2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d016ba07-f2fb-4242-8e65-dfbbd95bcbe2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            Susceptible  Infected  Fatal or Recovered\n",
              "Date                                                 \n",
              "2022-01-01       999000      1000                   0\n",
              "2022-01-02       998787      1133                  80\n",
              "2022-01-03       998546      1283                 170\n",
              "2022-01-04       998273      1454                 273\n",
              "2022-01-05       997964      1647                 389"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-124eb53d-624c-4f16-841a-5832341d77e6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Susceptible</th>\n",
              "      <th>Infected</th>\n",
              "      <th>Fatal or Recovered</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2022-06-26</th>\n",
              "      <td>88354</td>\n",
              "      <td>750</td>\n",
              "      <td>910895</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-06-27</th>\n",
              "      <td>88342</td>\n",
              "      <td>708</td>\n",
              "      <td>910950</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-06-28</th>\n",
              "      <td>88329</td>\n",
              "      <td>669</td>\n",
              "      <td>911002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-06-29</th>\n",
              "      <td>88318</td>\n",
              "      <td>632</td>\n",
              "      <td>911050</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-06-30</th>\n",
              "      <td>88307</td>\n",
              "      <td>596</td>\n",
              "      <td>911096</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-124eb53d-624c-4f16-841a-5832341d77e6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-124eb53d-624c-4f16-841a-5832341d77e6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-124eb53d-624c-4f16-841a-5832341d77e6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            Susceptible  Infected  Fatal or Recovered\n",
              "Date                                                 \n",
              "2022-06-26        88354       750              910895\n",
              "2022-06-27        88342       708              910950\n",
              "2022-06-28        88329       669              911002\n",
              "2022-06-29        88318       632              911050\n",
              "2022-06-30        88307       596              911096"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "one_df = model.solve()\n",
        "display(one_df.head())\n",
        "display(one_df.tail())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u3LM2rYNCwKq"
      },
      "source": [
        "Plot the time-series data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "wfF9YVpjBrwx",
        "outputId": "5a3ce53d-2f4d-4aaf-b1c5-da2b4419d2f3"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "cs.line_plot(one_df, title=f\"Sample data of SIR model {model.settings()['param_dict']}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aJPXHdO6DlvP"
      },
      "source": [
        "### 3.2 Sample data of multi-phase ODE model\n",
        "Regarding multi-phase ODE models, please refer to [Phase-dependent SIR models](https://lisphilar.github.io/covid19-sir/04_phase_dependent.html). Here, we will create a sample data with two-phase SIR model and tau value 1440 min, the first date 01Jan2022, the last date 30Jun2022.\n",
        "\n",
        "The 0th phase: 01Jan2022 - 28Feb2022, rho=0.2, sigma=0.075 (preset)  \n",
        "The 1st phase: 01Mar2022 - 30Jun2022, **rho=0.4**, sigma=0.075\n",
        "\n",
        "We will use `Dynamics` class. At first, set the first/date of dynamics and set th 0th phase ODE parameters."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "xfg1w4MHDQbY",
        "outputId": "553461c8-e17f-406a-94fd-9cbc8ebd4e19"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-2227d7bf-dd91-44aa-bce3-dd13d12c1f01\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Start</th>\n",
              "      <th>End</th>\n",
              "      <th>Rt</th>\n",
              "      <th>rho</th>\n",
              "      <th>sigma</th>\n",
              "      <th>1/beta [day]</th>\n",
              "      <th>1/gamma [day]</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Phase</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0th</th>\n",
              "      <td>2022-01-01</td>\n",
              "      <td>2022-06-30</td>\n",
              "      <td>2.67</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0.075</td>\n",
              "      <td>5</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2227d7bf-dd91-44aa-bce3-dd13d12c1f01')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2227d7bf-dd91-44aa-bce3-dd13d12c1f01 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2227d7bf-dd91-44aa-bce3-dd13d12c1f01');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "           Start        End    Rt  rho  sigma  1/beta [day]  1/gamma [day]\n",
              "Phase                                                                     \n",
              "0th   2022-01-01 2022-06-30  2.67  0.2  0.075             5             13"
            ]
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "dyn = cs.Dynamics.from_sample(model=cs.SIRModel, date_range=(\"01Jan2022\", \"30Jun2022\"))\n",
        "# Show summary\n",
        "dyn.summary()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c3yq1XhyFYm4"
      },
      "source": [
        "Add the 1st phase with `Dynamics.register()` method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "52F-E4RsFFMt",
        "outputId": "31dfb44e-7ca1-444c-c037-67e3f1904c11"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-961ee40b-c449-4697-9bc7-9c0f81a4af57\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Susceptible</th>\n",
              "      <th>Infected</th>\n",
              "      <th>Recovered</th>\n",
              "      <th>Fatal</th>\n",
              "      <th>rho</th>\n",
              "      <th>sigma</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2022-01-01</th>\n",
              "      <td>999000</td>\n",
              "      <td>1000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0.075</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-02</th>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-03</th>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-04</th>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-05</th>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-06-26</th>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.075</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-06-27</th>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.075</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-06-28</th>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.075</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-06-29</th>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.075</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-06-30</th>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.075</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>181 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-961ee40b-c449-4697-9bc7-9c0f81a4af57')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-961ee40b-c449-4697-9bc7-9c0f81a4af57 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-961ee40b-c449-4697-9bc7-9c0f81a4af57');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            Susceptible  Infected  Recovered  Fatal   rho  sigma\n",
              "Date                                                            \n",
              "2022-01-01       999000      1000          0      0   0.2  0.075\n",
              "2022-01-02         <NA>      <NA>       <NA>   <NA>  <NA>   <NA>\n",
              "2022-01-03         <NA>      <NA>       <NA>   <NA>  <NA>   <NA>\n",
              "2022-01-04         <NA>      <NA>       <NA>   <NA>  <NA>   <NA>\n",
              "2022-01-05         <NA>      <NA>       <NA>   <NA>  <NA>   <NA>\n",
              "...                 ...       ...        ...    ...   ...    ...\n",
              "2022-06-26         <NA>      <NA>       <NA>   <NA>   0.4  0.075\n",
              "2022-06-27         <NA>      <NA>       <NA>   <NA>   0.4  0.075\n",
              "2022-06-28         <NA>      <NA>       <NA>   <NA>   0.4  0.075\n",
              "2022-06-29         <NA>      <NA>       <NA>   <NA>   0.4  0.075\n",
              "2022-06-30         <NA>      <NA>       <NA>   <NA>   0.4  0.075\n",
              "\n",
              "[181 rows x 6 columns]"
            ]
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "setting_df = dyn.register()\n",
        "setting_df.loc[\"01Mar2022\": \"30Jun2022\", [\"rho\", \"sigma\"]] = [0.4, 0.075]\n",
        "setting_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "kHRTBCp9GAn5",
        "outputId": "e42ed1d6-1e2e-48b5-de76-73bdc976d8ba"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-5a3ac929-bcb1-42ad-ad31-9d8052722c62\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Start</th>\n",
              "      <th>End</th>\n",
              "      <th>Rt</th>\n",
              "      <th>rho</th>\n",
              "      <th>sigma</th>\n",
              "      <th>1/beta [day]</th>\n",
              "      <th>1/gamma [day]</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Phase</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0th</th>\n",
              "      <td>2022-01-01</td>\n",
              "      <td>2022-02-28</td>\n",
              "      <td>2.67</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0.075</td>\n",
              "      <td>5</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1st</th>\n",
              "      <td>2022-03-01</td>\n",
              "      <td>2022-06-30</td>\n",
              "      <td>5.33</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.075</td>\n",
              "      <td>2</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5a3ac929-bcb1-42ad-ad31-9d8052722c62')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5a3ac929-bcb1-42ad-ad31-9d8052722c62 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5a3ac929-bcb1-42ad-ad31-9d8052722c62');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "           Start        End    Rt  rho  sigma  1/beta [day]  1/gamma [day]\n",
              "Phase                                                                     \n",
              "0th   2022-01-01 2022-02-28  2.67  0.2  0.075             5             13\n",
              "1st   2022-03-01 2022-06-30  5.33  0.4  0.075             2             13"
            ]
          },
          "execution_count": 22,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "dyn.register(data=setting_df)\n",
        "# Show summary\n",
        "dyn.summary()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KIatMUQlGgfv"
      },
      "source": [
        "Solve the ODE model with `Dynamics().simulate()` method and plot the time-series data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "li4MlC0GGeiT",
        "outputId": "f83354fa-c3ef-42df-ce98-caa8fc6c1dea"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "two_df = dyn.simulate(model_specific=True)\n",
        "cs.line_plot(two_df, title=\"Sample data of two-phase SIR model\", v=[\"01Mar2022\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ULqVx3R5H268"
      },
      "source": [
        "When we need convert model-specific variables to model-free variables (Susceptible/Infected/Fatal/Recovered), we will set `model_specific=False` (default).\n",
        "Because R=\"Fatal or Recovered\" in SIR model, we assume that R=\"Recovered\" and F = 0."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "S5uM-kdCHLaD",
        "outputId": "9f6524d4-9e62-496b-ba7b-59351836cb15"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "two_df = dyn.simulate(model_specific=False)\n",
        "cs.line_plot(two_df, title=\"Sample data of two-phase SIR model with SIRF variables\", v=[\"01Mar2022\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q63KLP93Is-e"
      },
      "source": [
        "Actually, observable variables are Population/Confirmed/Infected/Recovered. We can calculate Population and Confirmed as follows.\n",
        "\n",
        "- Confirmed = Infected + Fatal + Recovered\n",
        "- Population = Susceptible + Confirmed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "Ta-PK8bbJB47",
        "outputId": "6862b434-d2ea-4bc6-ab87-863f50b65f6f"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "real_df = two_df.copy()\n",
        "real_df[\"Confirmed\"] = real_df[[\"Infected\", \"Fatal\", \"Recovered\"]].sum(axis=1)\n",
        "real_df[\"Population\"] = real_df[[\"Susceptible\", \"Confirmed\"]].sum(axis=1)\n",
        "real_df = real_df.loc[:, [\"Population\", \"Confirmed\", \"Recovered\", \"Fatal\"]]\n",
        "cs.line_plot(real_df, title=\"Sample data of two-phase SIR model with observable variables\", v=[\"01Mar2022\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pK7Pi3MLKtLa"
      },
      "source": [
        "Thank you!"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "include_colab_link": true,
      "name": "01_data_preparation.ipynb",
      "provenance": [],
      "toc_visible": true
    },
    "kernelspec": {
      "display_name": "Python 3.9.8 ('.venv': poetry)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.9.8"
    },
    "orig_nbformat": 4,
    "vscode": {
      "interpreter": {
        "hash": "22bb74880181aee4909a67ef083e714bf83db977b91038d43aef8b1870a4f681"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
