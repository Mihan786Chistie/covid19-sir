{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "view-in-github"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lisphilar/covid19-sir/blob/master/example/01_data_preparation.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hNtWGMj80ftz"
      },
      "source": [
        "# Data preparation\n",
        "The first step of data science is data preparation. `covsirphy` has the following three functionality for that.\n",
        "\n",
        "1. Downloading datasets from recommended data servers\n",
        "2. Reading `pandas.DataFrame`\n",
        "3. Generator of sample data with SIR-derived ODE model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "4xwq1Ez50ft0",
        "outputId": "93d5bc0e-07d5-4c5a-a278-fb53091e076c"
      },
      "outputs": [],
      "source": [
        "from pprint import pprint\n",
        "import pandas as pd\n",
        "try:\n",
        "    import covsirphy as cs\n",
        "except ImportError:\n",
        "    !pip install --upgrade \"git+https://github.com/lisphilar/covid19-sir.git#egg=covsirphy\" -qq\n",
        "    import covsirphy as cs\n",
        "cs.__version__"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QH0AEUrT0ft1"
      },
      "source": [
        "## 1. Downloading datasets from recommended data \n",
        "We will download datasets from the following recommended data servers.\n",
        "\n",
        "* **COVID-19 Data Hub, https://covid19datahub.io/**\n",
        "    * Guidotti, E., Ardia, D., (2020), “COVID-19 Data Hub”, Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n",
        "    * The number of cases (JHU style)\n",
        "    * Population values in each country/province\n",
        "    * [Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)\n",
        "    * The number of tests\n",
        "* **Our World In Data, https://github.com/owid/covid-19-data/tree/master/public/data**\n",
        "    * Hasell, J., Mathieu, E., Beltekian, D. et al. A cross-country database of COVID-19 testing. Sci Data 7, 345 (2020). https://doi.org/10.1038/s41597-020-00688-8\n",
        "    * The number of tests\n",
        "    * The number of vaccinations\n",
        "    * The number of people who received vaccinations\n",
        "* **COVID-19 Open Data by Google Cloud Platform, https://github.com/GoogleCloudPlatform/covid-19-open-data**\n",
        "    * O. Wahltinez and others (2020), COVID-19 Open-Data: curating a fine-grained, global-scale data repository for SARS-CoV-2, Work in progress, https://goo.gle/covid-19-open-data\n",
        "    * percentage to baseline in visits\n",
        "    * Note: Please refer to [Google Terms of Service](https://policies.google.com/terms) in advance.\n",
        "* **World Bank Open Data, https://data.worldbank.org/**\n",
        "    * World Bank Group (2020), World Bank Open Data, https://data.worldbank.org/\n",
        "    * Population pyramid\n",
        "* **Datasets for CovsirPhy, https://github.com/lisphilar/covid19-sir/tree/master/data**\n",
        "    * Hirokazu Takaya (2020-2022), GitHub repository, COVID-19 dataset in Japan, https://github.com/lisphilar/covid19-sir/tree/master/data.\n",
        "    * The number of cases in Japan (total/prefectures)\n",
        "    * Metadata regarding Japan prefectures\n",
        "\n",
        "***\n",
        "\n",
        "How to request new data loader:  \n",
        "If you want to use a new dataset for your analysis, please kindly inform us using [GitHub Issues: Request new method of DataLoader class](https://github.com/lisphilar/covid19-sir/issues/new/?template=request-new-method-of-dataloader-class.md). Please read [Guideline of contribution](https://lisphilar.github.io/covid19-sir/CONTRIBUTING.html) in advance."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SxYNNSWF0ft1"
      },
      "source": [
        "### 1-1. With `DataEngineer` class\n",
        "We can use `DataEngineer().download()` for data downloading from recommended data servers as the quickest way."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RG16Z6wJ0ft1",
        "outputId": "46bf0c3d-dfb1-4719-8fc0-b08838125938"
      },
      "outputs": [],
      "source": [
        "eng = cs.DataEngineer()\n",
        "eng.download();"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "olESmSIm0ft2"
      },
      "source": [
        "We can get the all downloaded records as a `pandas.DataFrame` with `DataEngineer().all()` method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "veU-JhWE0ft3",
        "outputId": "9de3ae82-7c34-4865-c3a2-4725794c3018"
      },
      "outputs": [],
      "source": [
        "all_df = eng.all()\n",
        "# Overview of the records\n",
        "all_df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rXI_-Szv0ft3"
      },
      "source": [
        "`DataEngineer.citations()` shows citations of the datasets."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f4rON2YT0ft3",
        "outputId": "826d992b-8aad-446e-c667-feda2b68d507"
      },
      "outputs": [],
      "source": [
        "print(\"\\n\".join(eng.citations()))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4Va72VKN0ft4"
      },
      "source": [
        "Note that, as default, `DataEngineer().download()` collects country-level data and save the datasets as CSV files in \"input\" (=`directory` argument of `DataEngineer()`) folder of the current directory. If the last modification time of the saved CSV files is within the last 12 (=`update_interval` argument of `DataEngineer()`) hours, the saved CSV files will be used as the database."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UQXWUfGV0ft4"
      },
      "source": [
        "For some countries (eg. Japan), province/state/prefecture level data is available and we can download it as follows."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "ZdJU3br70ft5",
        "outputId": "d8029f79-3f7c-4719-96a6-f23ec495a152"
      },
      "outputs": [],
      "source": [
        "eng_jpn = cs.DataEngineer()\n",
        "eng_jpn.download(country=\"Japan\")\n",
        "eng_jpn.all().head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TOFKVnfc0ft5"
      },
      "source": [
        "For some countries (eg. USA), city-level data is available and we can download it as follows."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 404
        },
        "id": "WpHe4r8Z0ft5",
        "outputId": "a28b00d0-b21d-4b05-d656-074cba58746e"
      },
      "outputs": [],
      "source": [
        "eng_alabama = cs.DataEngineer()\n",
        "eng_alabama.download(country=\"USA\", province=\"Alabama\")\n",
        "eng_alabama.all().head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XTYFC2gp0ft6"
      },
      "source": [
        "### 1-2. With `DataDownloader` class\n",
        "`DataEngineer` class is suggested because it has data cleaning methods and so on, but we can use `DataDownloader` class for data downloading."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eU11PgvY0ft6"
      },
      "outputs": [],
      "source": [
        "dl = cs.DataDownloader()\n",
        "dl_df = dl.layer(country=None, province=None)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xWgMq6Cp0ft6",
        "outputId": "14aeb714-43aa-4c4a-beb8-ad336c3d07cc"
      },
      "outputs": [],
      "source": [
        "# Overview of the records\n",
        "dl_df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "efzYaK0f4k39"
      },
      "source": [
        "Note that ISO3/Province/City columns have string data instead of categorical data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vqj_VfnR0ft6",
        "outputId": "4f0e7637-cd8f-4d29-9576-4c886c01f1f6"
      },
      "outputs": [],
      "source": [
        "# Citations\n",
        "print(\"\\n\".join(dl.citations()))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OT9RbzGV0ft7"
      },
      "source": [
        "## 2. Reading `pandas.DataFrame`\n",
        "We may need to use our own datasets for analysis because the dataset is not included in the recommended data servers. `DataEngineer().register()` registers new datasets of `pandas.DataFrame` format."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mKhWAUWn0ft7"
      },
      "source": [
        "At first, we will prepare the new dataset as `pandas.DataFrame`. Just as a demonstration, we use [COVID-19 dataset in Japan](https://github.com/lisphilar/covid19-sir/tree/master/data). (Note that this is included in the recommended servers and the following is usually un-necessary.)\n",
        "\n",
        "Hirokazu Takaya (2020-2022), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0lx_4keJ0ft7"
      },
      "source": [
        "Country-level data:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "PdPd010x0ft7",
        "outputId": "1c0fd704-7fd3-45f6-dec0-4cd3d29ae599"
      },
      "outputs": [],
      "source": [
        "c_url = \"https://raw.githubusercontent.com/lisphilar/covid19-sir/master/data/japan/covid_jpn_total.csv\"\n",
        "c_df = pd.read_csv(c_url, dayfirst=False)\n",
        "# Check columns of the pandas.DataFrame\n",
        "c_df.tail()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wi9cwGHH0ft7"
      },
      "source": [
        "Prefecture-level data:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "gFQLGs2g0ft7",
        "outputId": "6e09e80e-6d00-43e2-8b00-e721148267eb"
      },
      "outputs": [],
      "source": [
        "p_url = \"https://raw.githubusercontent.com/lisphilar/covid19-sir/master/data/japan/covid_jpn_prefecture.csv\"\n",
        "p_df = pd.read_csv(p_url, dayfirst=False)\n",
        "# Check columns of the pandas.DataFrame\n",
        "p_df.tail()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dZng7lhJ0ft7"
      },
      "source": [
        "We may create a `DataEngineer` instance, specifying the layer of location names. However, there is a discrepancy of layer names. `c_df` had \"Location\" layer and `p_df` had \"Prefecture\" layer. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1OWNFwOG0ft8",
        "outputId": "3407dc28-c0d7-4f20-f5c6-a347b11b5997"
      },
      "outputs": [],
      "source": [
        "print(c_df.columns)\n",
        "print(p_df.columns)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mr81cc9e51o3",
        "outputId": "19be41d0-13f6-4a78-b3fd-fd6fa5180506"
      },
      "outputs": [],
      "source": [
        "print(c_df.Location.unique())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c-ize7yg47WM"
      },
      "source": [
        "To make country-level dataset, calculate total values of Domestic/Returnee/Airport."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "DUdncF_80ft8",
        "outputId": "6b6a289b-67b7-4847-8709-908c4becd094"
      },
      "outputs": [],
      "source": [
        "country_df = c_df.groupby(\"Date\").sum().reset_index()\n",
        "country_df.insert(1, \"Country\", \"Japan\")\n",
        "country_df.insert(2, \"Prefecture\", pd.NA)\n",
        "country_df.tail()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Io9Qlh2t7uHB"
      },
      "source": [
        "To make prefecture-level data, add \"Country\" column."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "-_yGoyb079Yl",
        "outputId": "c53256c2-6a7f-4161-c26e-2c34153c72c0"
      },
      "outputs": [],
      "source": [
        "prefecture_df = p_df.copy()\n",
        "prefecture_df.insert(1, \"Country\", \"Japan\")\n",
        "prefecture_df.tail()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GRU7lCdv8LMi"
      },
      "source": [
        "Create `DataEngineer` instance and register datasets."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 322
        },
        "id": "2tUaYxzA8J-r",
        "outputId": "c22bbe89-0a8b-42eb-8911-d1ddefefa160"
      },
      "outputs": [],
      "source": [
        "# Set layers and specify layer name of country (which will be converted to ISO3 code for standardization)\n",
        "eng_own = cs.DataEngineer(layers=[\"Country\", \"Prefecture\"], country=\"Country\")\n",
        "# Country-level data\n",
        "eng_own.register(data=country_df, citations=\"New country-level data\", dayfirst=False)\n",
        "# Prefecture-level data\n",
        "eng_own.register(data=prefecture_df, citations=\"New prefecture-level data\", dayfirst=False)\n",
        "# Show data\n",
        "display(eng_own.all().tail())\n",
        "# Show citations\n",
        "print(\"\\n\".join(eng_own.citations()))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Data loading in Kaggle Notebook\n",
        "\n",
        "We can use the recommended datasets in [Kaggle](https://www.kaggle.com/) Notebook. The datasets are saved in \"/kaggle/input/\" directory. Additionally, we can use Kaggle Datasets (CSV files) with `covsirphy` in Kaggle Notebook.\n",
        "\n",
        "Note:  \n",
        "If you have Kaggle API, you can download Kaggle datasets to your local environment by updating and executing [input.py](https://github.com/lisphilar/covid19-sir/blob/master/input.py) script. CSV files will be saved in \"/kaggle/input/\" directory.\n",
        "\n",
        "Kaggle API:  \n",
        "Move to account page of Kaggle and download \"kaggle.json\" by selecting \"API > Create New API Token\" button. Copy the json file to the top directory of the local repository or \"~/.kaggle\". Please refer to [How to Use Kaggle: Public API](https://www.kaggle.com/docs/api) and [stackoverflow: documentation for Kaggle API *within* python?](https://stackoverflow.com/questions/55934733/documentation-for-kaggle-api-within-python#:~:text=Here%20are%20the%20steps%20involved%20in%20using%20the%20Kaggle%20API%20from%20Python.&text=Go%20to%20your%20Kaggle%20account,json%20will%20be%20downloaded)\n",
        "\n",
        "### Acknowledgement\n",
        "\n",
        "In Feb2020, CovsirPhy project started in Kaggle platform with [COVID-19 data with SIR model](https://www.kaggle.com/lisphilar/covid-19-data-with-sir-model) notebook using the following datasets.\n",
        "\n",
        "- The number of cases (JHU) and linelist: [Novel Corona Virus 2019 Dataset by SRK](https://www.kaggle.com/sudalairajkumar/novel-corona-virus-2019-dataset)\n",
        "- Population in each country:  [covid19 global forecasting: locations population by Dmitry A. Grechka](https://www.kaggle.com/dgrechka/covid19-global-forecasting-locations-population)\n",
        "- The number of cases in Japan: [COVID-19 dataset in Japan by Lisphilar](https://www.kaggle.com/lisphilar/covid19-dataset-in-japan)\n",
        "\n",
        "Best Regards.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jaOBElU50ft8"
      },
      "source": [
        "## 3. Generator of sample data with SIR-derived ODE model\n",
        "CovsirPhy can generate sample data with subclasses of `ODEModel` and `Dynamics` class. Refer to the followings."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ak6-zmPJ_0fO"
      },
      "source": [
        "### 3.1 Sample data of one-phase ODE model\n",
        "Regarding ODE models, please refer to **[TBC]**. Here, we will create a sample data with one-phase SIR model and tau value 1440 min, the first date 01Jan2022, the last date 30Jun2022. ODE parameter values are preset."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PXwvK4Dg_zgh",
        "outputId": "a6e82877-289b-4c65-b563-c2604ce2c865"
      },
      "outputs": [],
      "source": [
        "# Create solver with preset\n",
        "model = cs.SIRModel.from_sample(date_range=(\"01Jan2022\", \"30Jun2022\"), tau=1440)\n",
        "# Show settings\n",
        "pprint(model.settings())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D3yr3a0YCWQw"
      },
      "source": [
        "Solve the ODE model with `ODEModel().solve()` method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "GHtEMTivCUIB",
        "outputId": "00d517b2-1d30-413b-de1a-e207e4f3f46b"
      },
      "outputs": [],
      "source": [
        "one_df = model.solve()\n",
        "display(one_df.head())\n",
        "display(one_df.tail())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u3LM2rYNCwKq"
      },
      "source": [
        "Plot the time-series data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "wfF9YVpjBrwx",
        "outputId": "5a3ce53d-2f4d-4aaf-b1c5-da2b4419d2f3"
      },
      "outputs": [],
      "source": [
        "cs.line_plot(one_df, title=f\"Sample data of SIR model {model.settings()['param_dict']}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aJPXHdO6DlvP"
      },
      "source": [
        "### 3.2 Sample data of multi-phase ODE model\n",
        "Regarding multi-phase ODE models, please refer to [Phase-dependent SIR models](https://lisphilar.github.io/covid19-sir/04_phase_dependent.html). Here, we will create a sample data with two-phase SIR model and tau value 1440 min, the first date 01Jan2022, the last date 30Jun2022.\n",
        "\n",
        "The 0th phase: 01Jan2022 - 28Feb2022, rho=0.2, sigma=0.075 (preset)  \n",
        "The 1st phase: 01Mar2022 - 30Jun2022, **rho=0.4**, sigma=0.075\n",
        "\n",
        "We will use `Dynamics` class. At first, set the first/date of dynamics and set th 0th phase ODE parameters."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "xfg1w4MHDQbY",
        "outputId": "553461c8-e17f-406a-94fd-9cbc8ebd4e19"
      },
      "outputs": [],
      "source": [
        "dyn = cs.Dynamics.from_sample(model=cs.SIRModel, date_range=(\"01Jan2022\", \"30Jun2022\"))\n",
        "# Show summary\n",
        "dyn.summary()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c3yq1XhyFYm4"
      },
      "source": [
        "Add the 1st phase with `Dynamics.register()` method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "52F-E4RsFFMt",
        "outputId": "31dfb44e-7ca1-444c-c037-67e3f1904c11"
      },
      "outputs": [],
      "source": [
        "setting_df = dyn.register()\n",
        "setting_df.loc[\"01Mar2022\": \"30Jun2022\", [\"rho\", \"sigma\"]] = [0.4, 0.075]\n",
        "setting_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "kHRTBCp9GAn5",
        "outputId": "e42ed1d6-1e2e-48b5-de76-73bdc976d8ba"
      },
      "outputs": [],
      "source": [
        "dyn.register(data=setting_df)\n",
        "# Show summary\n",
        "dyn.summary()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KIatMUQlGgfv"
      },
      "source": [
        "Solve the ODE model with `Dynamics().simulate()` method and plot the time-series data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "li4MlC0GGeiT",
        "outputId": "f83354fa-c3ef-42df-ce98-caa8fc6c1dea"
      },
      "outputs": [],
      "source": [
        "two_df = dyn.simulate(model_specific=True)\n",
        "cs.line_plot(two_df, title=\"Sample data of two-phase SIR model\", v=[\"01Mar2022\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ULqVx3R5H268"
      },
      "source": [
        "When we need convert model-specific variables to model-free variables (Susceptible/Infected/Fatal/Recovered), we will set `model_specific=False` (default).\n",
        "Because R=\"Fatal or Recovered\" in SIR model, we assume that R=\"Recovered\" and F = 0."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "S5uM-kdCHLaD",
        "outputId": "9f6524d4-9e62-496b-ba7b-59351836cb15"
      },
      "outputs": [],
      "source": [
        "two_df = dyn.simulate(model_specific=False)\n",
        "cs.line_plot(two_df, title=\"Sample data of two-phase SIR model with SIRF variables\", v=[\"01Mar2022\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q63KLP93Is-e"
      },
      "source": [
        "Actually, observable variables are Population/Confirmed/Infected/Recovered. We can calculate Population and Confirmed as follows.\n",
        "\n",
        "- Confirmed = Infected + Fatal + Recovered\n",
        "- Population = Susceptible + Confirmed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "Ta-PK8bbJB47",
        "outputId": "6862b434-d2ea-4bc6-ab87-863f50b65f6f"
      },
      "outputs": [],
      "source": [
        "real_df = two_df.copy()\n",
        "real_df[\"Confirmed\"] = real_df[[\"Infected\", \"Fatal\", \"Recovered\"]].sum(axis=1)\n",
        "real_df[\"Population\"] = real_df[[\"Susceptible\", \"Confirmed\"]].sum(axis=1)\n",
        "real_df = real_df.loc[:, [\"Population\", \"Confirmed\", \"Recovered\", \"Fatal\"]]\n",
        "cs.line_plot(real_df, title=\"Sample data of two-phase SIR model with observable variables\", v=[\"01Mar2022\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pK7Pi3MLKtLa"
      },
      "source": [
        "Thank you!"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "include_colab_link": true,
      "name": "01_data_preparation.ipynb",
      "provenance": [],
      "toc_visible": true
    },
    "kernelspec": {
      "display_name": "Python 3.9.8 ('.venv': poetry)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.9.13"
    },
    "orig_nbformat": 4,
    "vscode": {
      "interpreter": {
        "hash": "22bb74880181aee4909a67ef083e714bf83db977b91038d43aef8b1870a4f681"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
